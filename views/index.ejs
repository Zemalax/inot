<!DOCTYPE html>
<html>
  <head>
    <meta name="viewport" content="width=device-width" />
    <link
      rel="stylesheet"
      href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css"
    />
    <link href="https://fonts.cdnfonts.com/css/tolkien" rel="stylesheet">
    <style>
      * {
        font-family: 'Tolkien', sans-serif;
      }
      body {
        background-image: url(background.jpg);
        background-repeat: no-repeat;
        background-size: cover;
        background-color: #0a0c0b;
      }
      .inot-container {
        display: flex;
        position: absolute;
        width: 100%;
        height: 100%;
        justify-content: center;
        align-items: center;
        flex-direction: column;
      }
      .inot-solver {
        display: flex;
        background-color: #0a0c0b;
        color: #c7b277;
        font-size: 27px;
        margin-top: 120px;
        text-align: center;
      }

      .inot-result {
        display: flex;
        color: #c7b277;
        font-size: 27px;
        margin-top: 120px;
        text-align: center;
        flex-direction: column;
        background-color: #0a0c0b;
        border: 3px solid #c7b277;
        border-radius: 15px;
        padding: 20px;
        z-index: 20;
      }

      .peppa {
        animation: peppa-animation 4s linear;
        animation-iteration-count: infinite;
        position: absolute;
        transition: 4s all;
      }

      .peppa_vis {
        animation: peppa-rotation  0.3s linear;
        animation-iteration-count: infinite;
        background-image: url(peppa.png);
        background-size: cover;
        width: 73px;
        height: 96px;
        transition: 4s all;
      }

      @keyframes peppa-animation {
        0% {
          transform: translateX(0);
        }
        25% {
          transform: translateX(-100px);
        }
        50% {
          transform: translateX(0px);
        }
        75% {
          transform: translateX(100px);
        }
        100% {
          transform: translateX(0);
        }
      }

      @keyframes peppa-rotation {
        0% {
          transform: rotate(0deg);
        }
        25% {
          transform: rotate(15deg);
        }
        50% {
          transform: rotate(0deg);
        }
        75% {
          transform: rotate(-15deg);
        }
        100% {
          transform: rotate(0deg);
        }
      }

      canvas {
          position: absolute;
          z-index: 10;
      }
    </style>
  </head>

  <script>
    var send = function(data) {
      const url = "/handler"
      let xhr = new XMLHttpRequest()
      xhr.open('POST', url, true)
      xhr.setRequestHeader('Content-type', 'application/json; charset=UTF-8')
      xhr.send(data);

      xhr.onreadystatechange = function() {
        if (xhr.readyState === XMLHttpRequest.DONE) {
          const responseBody = JSON.parse(xhr.responseText);
          window.open(responseBody.url, "_self")
        }
      }

      xhr.onload = function () {
        if(xhr.status === 201) {
          console.log("Post successfully created!")
        }
      }
    }

    document.addEventListener('DOMContentLoaded', () => {
      document.querySelector('.inot-solver').addEventListener("keypress", (e) => {
        if (e.key==='Enter') {
          const value = document.querySelector('.inot-solver').value;
          send(JSON.stringify({data: value}));
        }
      })
    })


  </script>

  <body>
    <div class="inot-container">
        <% if(!locals.solved){ %>
        <input class="inot-solver" type="text" placeholder="Say a word oink and Enter">
        <% } %>

        <% if(locals.number){ %>
        <div class="inot-result">
          <h2>Letter <%= locals.number %> - <%= letter%></h2>
          <h2>Hint: <%= hint %></h2>
        </div>
        <% } %>


        <% if(locals.peppa){ %>
        <div class="peppa">
          <div class="peppa_vis"></div>
        </div>
        <% } %>

        <% if(locals.solved){ %>
            <div class="inot-result">
                <h2>Have you found out where the artifact is, little hobbit</h2>
                <h2>He is where Kors was hidden while everyone thought she had fallen</h2>
            </div>
            <canvas></canvas>
        <% } %>
    </div>

  </body>

  <script>
      const rndColor = () => {
          const base  = Math.random() * 360 | 0;
          const color = (275 * (base / 200 | 0)) + base % 200;
          return fac => `hsl(${color}, ${(fac || 1) * 100}%, ${(fac || 1) * 60}%)`;
      };

      class Battery
      {
          constructor(fireworks) {
              this.fireworks = fireworks;
              this.salve = [];
              this.x     = Math.random();
              this.t     = 0;
              this.tmod  = 20 + Math.random() * 20 | 0;
              this.tmax  = 500 + Math.random() * 1000;

              this._shot = salve => {
                  // console.log(this.x * this.fireworks.width, salve.y);
                  if (salve.y < salve.ym) {
                      salve.cb = this._prepareExplosion;
                  }

                  salve.x += salve.mx;
                  salve.y -= 0.01;

                  const r = Math.atan2(-0.01, salve.mx);

                  this.fireworks.engine.strokeStyle = salve.c(.7);
                  this.fireworks.engine.beginPath();

                  this.fireworks.engine.moveTo(
                      (this.x + salve.x) * this.fireworks.width + Math.cos(r) * 4,
                      salve.y * this.fireworks.height + Math.sin(r) * 4
                  );

                  this.fireworks.engine.lineTo(
                      (this.x + salve.x) * this.fireworks.width + Math.cos(r + Math.PI) * 4,
                      salve.y * this.fireworks.height + Math.sin(r + Math.PI) * 4
                  );

                  this.fireworks.engine.lineWidth = 3;
                  this.fireworks.engine.stroke();

                  // this.fireworks.engine.fillRect((this.x + salve.x) * this.fireworks.width, salve.y * this.fireworks.height, 10, 10);
              };

              this._prepareExplosion = salve => {
                  salve.explosion = [];

                  for (let i = 0, max = 32; i < max; i++) {
                      salve.explosion.push({
                          r : 2 * i / Math.PI,
                          s : 0.5 + Math.random() * 0.5,
                          d : 0,
                          y : 0
                      });
                  }

                  salve.cb = this._explode;
              };

              this._explode = salve => {

                  this.fireworks.engine.fillStyle = salve.c();

                  salve.explosion.forEach(explo => {

                      explo.d += explo.s;
                      explo.s *= 0.99;
                      explo.y += 0.5;

                      const alpha = explo.s * 2.5;
                      this.fireworks.engine.globalAlpha = alpha;

                      if (alpha < 0.05) {
                          salve.cb = null;
                      }

                      this.fireworks.engine.fillRect(
                          Math.cos(explo.r) * explo.d + (this.x + salve.x) * this.fireworks.width,
                          Math.sin(explo.r) * explo.d + explo.y + salve.y * this.fireworks.height,
                          3,
                          3
                      );
                  });

                  this.fireworks.engine.globalAlpha = 1;
              }
          }

          pushSalve() {
              this.salve.push({
                  x: 0,
                  mx: -0.02 * Math.random() * 0.04,
                  y: 1,
                  ym: 0.05 + Math.random() * 0.5,
                  c: rndColor(),
                  cb: this._shot
              });
          };

          render() {

              this.t++;

              if (this.t < this.tmax && (this.t % this.tmod) === 0) {
                  this.pushSalve();
              }

              let rendered = false;

              this.salve.forEach(salve => {

                  if (salve.cb) {
                      rendered = true;
                      salve.cb(salve);
                  }

              });

              if (this.t > this.tmax) {
                  return rendered;
              }

              return true;
          }
      }

      class Fireworks
      {
          constructor() {
              this.canvas = window.document.querySelector('canvas');
              this.engine = this.canvas.getContext('2d');
              this.stacks = new Map();

              this.resize();
          }

          resize() {
              this.width  = window.innerWidth;
              this.height = window.innerHeight;

              this.canvas.setAttribute('width', this.width);
              this.canvas.setAttribute('height', this.height);
          }

          clear() {
              this.engine.clearRect(0, 0, this.width, this.height);

          }

          addBattery() {
              const bat = new Battery(this);
              this.stacks.set(Date.now(), bat);
          }

          render() {

              if (Math.random() < 0.05) {
                  this.addBattery();
              }

              this.clear();

              this.stacks.forEach((scene, key) => {

                  const rendered = scene.render();

                  if (!rendered) {
                      this.stacks.delete(key);
                  }
              });

              requestAnimationFrame(this.render.bind(this));
          }

          run() {
              for(let i = 0; i < 5; i++) {
                  this.addBattery();
              }
              window.addEventListener('resize', this.resize.bind(this));
              this.render();
          }
      }

      a = new Fireworks();
      a.run();
  </script>
</html>